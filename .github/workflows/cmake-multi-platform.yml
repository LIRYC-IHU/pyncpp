name: CMake on multiple platforms

on:
  workflow_dispatch:
  push:
    branches: [ "win" ]
  pull_request:
    branches: [ "win" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: gcc
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=build" >> "$GITHUB_OUTPUT"
        echo "python-output-subdir=${{ matrix.build_type }}/$([[ "$OSTYPE" == "msys" ]] && echo "python310" || echo "lib/python3.10")" >> "$GITHUB_OUTPUT"

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.13.1'
        dir: '${{ github.workspace }}/dependencies/'
        cache: 'true'
        cache-key-prefix: 'install-qt-action'
        setup-python: 'false'

    - name: Cache Python build
      uses: actions/cache@v3
      with:
        path: |
          '${{ steps.strings.outputs.build-output-dir }}/python'
          '${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.python-output-subdir }}'
        key: ${{ runner.OS }}-python-cache-${{ hashFiles('python/*') }}
        restore-keys: |
          ${{ runner.OS }}-python-cache-

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Test
      # working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest --build-config ${{ matrix.build_type }}
