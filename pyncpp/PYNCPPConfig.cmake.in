# Copyright (c) 2022 IHU Liryc, Universit√© de Bordeaux, Inria.
# License: BSD-3-Clause

include(CMakeFindDependencyMacro)

@PACKAGE_INIT@

set_and_check(PYNCPP_LIBRARY_DIRS @PACKAGE_PYNCPP_BINARY_DIR@)

if(@PYNCPP_USE_CUSTOM_PYTHON@)
    set_and_check(PYNCPP_PYTHON_DIR @PACKAGE_Python_DIR@)
endif()

set_and_check(_exported_modules_dir @PACKAGE_exported_modules_dir@)

foreach(_module @exported_modules@)
    include(${_exported_modules_dir}/${_module}.cmake)
endforeach()

set_and_check(_pyncpp_export_file @PACKAGE_PYNCPP_EXPORT_FILE@)

set(PYNCPP_EXCLUDED_PYTHON_MODULES @PYNCPP_EXCLUDED_PYTHON_MODULES@)

set(PYNCPP_Qt5_FOUND @PYNCPP_QT5_SUPPORT@)
set(PYNCPP_SWIG_FOUND @PYNCPP_SWIG_SUPPORT@)

set(PYNCPP_NO_GPL @PYNCPP_NO_GPL@)

if(@PYNCPP_SWIG_SUPPORT@)
    cmake_policy(SET CMP0078 NEW) # Standard SWIG target names
    cmake_policy(SET CMP0086 NEW) # Pass -module option to SWIG
    find_dependency(SWIG @PYNCPP_SWIG_VERSION@ REQUIRED COMPONENTS python)
    include(${SWIG_USE_FILE})
endif()

if(@PYNCPP_USE_CUSTOM_PYTHON@)
    find_dependency(Python REQUIRED
        COMPONENTS Interpreter Development
        PATHS ${PYNCPP_PYTHON_DIR}
        NO_DEFAULT_PATHS
        )
    set(PYNCPP_PACKAGABLE_PYTHON TRUE)
else()
    find_dependency(Python @PYNCPP_REQUIRED_PYTHON_VERSION_MAJOR@.@PYNCPP_REQUIRED_PYTHON_VERSION_MINOR@ EXACT REQUIRED
        COMPONENTS Interpreter Development
        )
    if(WIN32)
        set(PYNCPP_PACKAGABLE_PYTHON TRUE)
    else()
        set(PYNCPP_PACKAGABLE_PYTHON FALSE)
    endif()
endif()

include("${_pyncpp_export_file}")

if(NOT TARGET Python_LIBRARY)
    PYNCPP_import_python_library(Python_LIBRARY)
endif()

set(PYNCPP_FOUND TRUE)
check_required_components(PYNCPP)
